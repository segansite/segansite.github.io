Elm.Page = Elm.Page || {};
Elm.Page.make = function (_elm) {
   "use strict";
   _elm.Page = _elm.Page || {};
   if (_elm.Page.values) return _elm.Page.values;
   var _U = Elm.Native.Utils.make(_elm),
   $Basics = Elm.Basics.make(_elm),
   $Color = Elm.Color.make(_elm),
   $Debug = Elm.Debug.make(_elm),
   $Graphics$Collage = Elm.Graphics.Collage.make(_elm),
   $Graphics$Element = Elm.Graphics.Element.make(_elm),
   $List = Elm.List.make(_elm),
   $Maybe = Elm.Maybe.make(_elm),
   $Random = Elm.Random.make(_elm),
   $Result = Elm.Result.make(_elm),
   $Signal = Elm.Signal.make(_elm),
   $Text = Elm.Text.make(_elm),
   $Time = Elm.Time.make(_elm),
   $Window = Elm.Window.make(_elm);
   var _op = {};
   var genPoint = function (s) {
      var _p0 = A2($Random.generate,A2($Random.pair,A2($Random.$float,-1,1),A2($Random.$float,-1,1)),s);
      return {ctor: "_Tuple2",_0: {x: _p0._0._0,y: _p0._0._1},_1: _p0._1};
   };
   var signalPointSeed = A3($Signal.foldp,
   F2(function (p,ss) {    return genPoint($Basics.snd(ss));}),
   {ctor: "_Tuple2",_0: {x: 0,y: 0},_1: $Random.initialSeed(0)},
   $Time.every($Time.millisecond));
   var signalPoint = A2($Signal.map,$Basics.fst,signalPointSeed);
   var showPi = F2(function (y,pi) {    return A2($Graphics$Collage.moveY,y,$Graphics$Collage.toForm($Graphics$Element.show(pi)));});
   var piApprox = function (s) {    var _p1 = s;var _p2 = _p1._1._0;return 4.0 * $Basics.toFloat(_p2) / $Basics.toFloat(_p1._0._0 + _p2);};
   var width = 200;
   var height = 200;
   var pointsToSquare = F2(function (c,lps) {
      var _p3 = lps;
      if (_p3.ctor === "[]") {
            return _U.list([]);
         } else {
            var _p4 = _p3._0;
            return A2($List._op["::"],
            A2($Graphics$Collage.move,{ctor: "_Tuple2",_0: width * _p4.x,_1: height * _p4.y},A2($Graphics$Collage.filled,c,$Graphics$Collage.circle(10))),
            A2(pointsToSquare,c,_p3._1));
         }
   });
   var stateAppend = function (st) {
      var _p5 = st;
      return A2($Basics._op["++"],A2(pointsToSquare,$Color.yellow,_p5._0._1),A2(pointsToSquare,$Color.black,_p5._1._1));
   };
   var background = F2(function (_p6,st) {
      var _p7 = _p6;
      var _p9 = _p7._0;
      var _p8 = _p7._1;
      return A2($Basics._op["++"],
      _U.list([$Graphics$Collage.toForm(A3($Graphics$Element.image,_p9,_p8,"img/personalBackground.png"))
              ,A2($Graphics$Collage.move,
              {ctor: "_Tuple2",_0: $Basics.toFloat(0 - _p9) / 3,_1: $Basics.toFloat(_p8) / 4},
              $Graphics$Collage.toForm($Graphics$Element.centered(A2($Text.link,"samsegan.github.io",$Text.fromString("samsegan.github.io")))))
              ,A2($Graphics$Collage.move,
              {ctor: "_Tuple2",_0: $Basics.toFloat(_p9) / 3,_1: $Basics.toFloat(_p8) / 4},
              $Graphics$Collage.toForm($Graphics$Element.centered(A2($Text.link,
              "desolate-headland-7179.herokuapp.com",
              $Text.fromString("desolate-headland-7179.herokuapp.com")))))
              ,A2($Graphics$Collage.moveY,-250,$Graphics$Collage.toForm($Graphics$Element.show(piApprox(st))))]),
      stateAppend(st));
   });
   var view = F2(function (_p10,st) {
      var _p11 = _p10;
      var _p13 = _p11._0;
      var _p12 = _p11._1;
      return A3($Graphics$Collage.collage,_p13,_p12,A2(background,{ctor: "_Tuple2",_0: _p13,_1: _p12},st));
   });
   var distance = function (pt) {    return $Basics.sqrt(Math.pow(pt.x,2) + Math.pow(pt.y,2));};
   var upstate = F2(function (pt,st) {
      var _p14 = st;
      var _p18 = _p14._1._0;
      var _p17 = _p14._1._1;
      var _p16 = _p14._0._1;
      var _p15 = _p14._0._0;
      return _U.cmp(distance(pt),0.5) < 1 ? {ctor: "_Tuple2"
                                            ,_0: {ctor: "_Tuple2",_0: _p15 + 1,_1: A2($List._op["::"],pt,_p16)}
                                            ,_1: {ctor: "_Tuple2",_0: _p18,_1: _p17}} : {ctor: "_Tuple2"
                                                                                        ,_0: {ctor: "_Tuple2",_0: _p15,_1: _p16}
                                                                                        ,_1: {ctor: "_Tuple2",_0: _p18 + 1,_1: A2($List._op["::"],pt,_p17)}};
   });
   var initState = {ctor: "_Tuple2",_0: {ctor: "_Tuple2",_0: 0,_1: _U.list([])},_1: {ctor: "_Tuple2",_0: 0,_1: _U.list([])}};
   var main = A3($Signal.map2,view,$Window.dimensions,A3($Signal.foldp,upstate,initState,signalPoint));
   var Point = F2(function (a,b) {    return {x: a,y: b};});
   return _elm.Page.values = {_op: _op
                             ,Point: Point
                             ,initState: initState
                             ,distance: distance
                             ,upstate: upstate
                             ,height: height
                             ,width: width
                             ,pointsToSquare: pointsToSquare
                             ,piApprox: piApprox
                             ,stateAppend: stateAppend
                             ,showPi: showPi
                             ,view: view
                             ,background: background
                             ,genPoint: genPoint
                             ,signalPointSeed: signalPointSeed
                             ,signalPoint: signalPoint
                             ,main: main};
};